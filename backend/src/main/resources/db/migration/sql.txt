GRANT SELECT, INSERT, UPDATE, DELETE ON 
    product, orders, order_product
TO "std-ext-016-02";

-- GRANT USAGE, SELECT ON SEQUENCE 
--     product_id_seq, orders_id_seq
-- TO std-ext-16-02;

# PostgreSQL
spring.datasource.url=jdbc:postgresql://rc1a-vdrnhudsvsfj80g8.mdb.yandexcloud.net:6432/std-ext-016-02?ssl=true&sslmode=verify-full&sslrootcert=/home/student/.postgresql/root.crt
spring.datasource.username=std-ext-016-02
spring.datasource.password=Testusr1234
spring.datasource.driver-class-name=org.postgresql.Driver

# MongoDB
spring.data.mongodb.uri=mongodb://std-ext-016-02:Testusr1234@rc1a-udg79n2h293n1hdk.mdb.yandexcloud.net:27018/std-ext-016-02?tls=true&tlsCAFile=/home/student/.mongodb/root.crt&replicaSet=rs01
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.flyway.enabled=false

# JPA / Hibernate
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.open-in-view=false

# Logging
logging.level.org.springframework=DEBUG
logging.level.com.zaxxer.hikari=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

-- V001__create_tables.sql
-- Create product table (singular name as in your schema)
CREATE TABLE   product (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    picture_url VARCHAR(255),
    price DOUBLE PRECISION
);

-- Create orders table
CREATE TABLE   orders (
    id BIGSERIAL PRIMARY KEY,
    status VARCHAR(255),
    date_created DATE DEFAULT CURRENT_DATE
);

-- Create order_product junction table
CREATE TABLE   order_product (
    order_id BIGINT NOT NULL,
    product_id BIGINT NOT NULL,
    quantity INTEGER NOT NULL,
    PRIMARY KEY (order_id, product_id),
    CONSTRAINT fk_order_product_order FOREIGN KEY (order_id) REFERENCES orders(id),
    CONSTRAINT fk_order_product_product FOREIGN KEY (product_id) REFERENCES product(id)
);

-- Create existing indexes
CREATE INDEX  order_product_order_id_idx ON order_product(order_id);
CREATE INDEX   orders_status_date_idx ON orders(status, date_created);


echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  (lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin 

-- Вставка продуктов
INSERT INTO product (name, picture_url, price) VALUES
('Сливочная', 'https://res.cloudinary.com/sugrobov/image/upload/v1623323635/repos/sausages/6.jpg', 320),
('Особая', 'https://res.cloudinary.com/sugrobov/image/upload/v1623323635/repos/sausages/5.jpg', 179),
('Молочная', 'https://res.cloudinary.com/sugrobov/image/upload/v1623323635/repos/sausages/4.jpg', 225),
('Нюренбергская', 'https://res.cloudinary.com/sugrobov/image/upload/v1623323635/repos/sausages/3.jpg', 315),
('Мюнхенская', 'https://res.cloudinary.com/sugrobov/image/upload/v1623323635/repos/sausages/2.jpg', 330),
('Русская', 'https://res.cloudinary.com/sugrobov/image/upload/v1623323635/repos/sausages/1.jpg', 189);

-- Обновляем sequence для product
-- SELECT setval('products_id_seq', (SELECT MAX(id) FROM product));

-- Вставка заказов
INSERT INTO orders (id, status, date_created) VALUES
(1, 'shipped', '2025-03-24'),
(2, 'shipped', '2025-01-04'),
(3, 'shipped', '2025-02-26'),
(4, 'shipped', '2025-03-22'),
(5, 'shipped', '2025-01-27'),
(6, 'shipped', '2025-03-24'),
(7, 'shipped', '2025-02-16'),
(8, 'shipped', '2025-01-06'),
(9, 'cancelled', '2025-03-26'),
(10, 'shipped', '2025-02-14'),
(11, 'pending', '2025-01-27'),
(12, 'cancelled', '2025-03-22'),
(13, 'shipped', '2025-02-25'),
(14, 'cancelled', '2025-02-21'),
(15, 'pending', '2025-02-15'),
(16, 'shipped', '2025-01-27'),
(17, 'cancelled', '2024-12-31'),
(18, 'pending', '2025-01-07'),
(19, 'cancelled', '2025-01-28'),
(20, 'pending', '2025-02-17'),
(21, 'cancelled', '2025-01-17'),
(22, 'pending', '2025-01-20'),
(23, 'pending', '2025-03-25'),
(24, 'pending', '2025-02-18'),
(25, 'pending', '2025-02-04'),
(26, 'shipped', '2025-01-19'),
(27, 'pending', '2025-02-27'),
(28, 'pending', '2025-03-04'),
(29, 'pending', '2025-01-26'),
(30, 'cancelled', '2025-01-22'),
(31, 'shipped', '2025-03-06'),
(32, 'cancelled', '2025-01-01');

-- Обновляем sequence для orders
-- SELECT setval('orders_id_seq', (SELECT MAX(id) FROM orders));

-- Вставка связей заказов и продуктов
INSERT INTO order_product (quantity, order_id, product_id) VALUES
(28, 1, 5),
(46, 2, 3),
(41, 3, 5),
(46, 4, 2),
(40, 5, 1),
(43, 6, 5),
(33, 7, 1),
(24, 8, 6),
(32, 9, 4),
(49, 10, 3),
(25, 11, 4),
(45, 12, 3),
(17, 13, 5),
(36, 14, 4),
(45, 15, 2),
(20, 16, 4),
(42, 17, 3),
(38, 18, 1),
(12, 19, 5),
(24, 20, 3),
(39, 21, 1),
(32, 22, 3),
(45, 23, 5),
(47, 24, 1),
(2, 25, 3),
(19, 26, 6),
(36, 27, 3),
(13, 28, 4),
(4, 29, 2),
(18, 30, 2),
(5, 31, 1),
(9, 32, 4);

-- Индексы для продуктов
CREATE INDEX   idx_product_name ON product(name);
CREATE INDEX   idx_product_price ON product(price);

-- Индексы для заказов
CREATE INDEX   idx_orders_status ON orders(status);
CREATE INDEX   idx_orders_date_created ON orders(date_created);
CREATE INDEX   idx_orders_status_date ON orders(status, date_created);

-- Индексы для связей заказ-продукт
CREATE INDEX  idx_order_product_order_id ON order_product(order_id);
CREATE INDEX  idx_order_product_product_id ON order_product(product_id);
CREATE INDEX  idx_order_product_quantity ON order_product(quantity);

stages:
  - build
  - notify
  - release
  - deploy

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  JAVA_OPTS: -XX:MaxRAMPercentage=90

cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

build:
  stage: build
  image: maven:3.8.5-openjdk-17
  script:
    - java --version
    - mvn --version
    - cd backend
    - mvn clean install -Dversion.application=${VERSION} -Dmaven.repo.local=${MAVEN_REPO_PATH}
  artifacts:
    paths:
      - backend/target/sausage-store-${VERSION}.jar
    expire_in: 1 week    
  rules:
    - changes:
      - backend/**/*

telegram-notification-backend:
  stage: notify
  script:
    - |
      curl -X POST "https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage" \
      -d "chat_id=-1002489406659&text=Сборка std-ext-016-02 бэкенда успешна! Артефакт доступен по ссылке: $CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_SHA/download?job=build-backend-code-job"
  rules:
    - changes:
        - backend/**
    - if: '$SEND_NOTIFICATION == "true"'

upload:
  stage: release
  needs:
    - build
  script:
    - cd backend
    - mvn deploy -DskipTests -s settings.xml -Dversion.application=${VERSION} -Dmaven.repo.local=${MAVEN_REPO_PATH}
  rules:
    - changes:
      - backend/**/*

deploy:
  stage: deploy
  environment:  
    name: "backend-$CI_COMMIT_REF_SLUG" 
    url: http://std-ext-016-79.praktikum-services.tech/ 
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 600 ~/.ssh/known_hosts

  script:
    - ssh ${DEV_USER}@${DEV_HOST} "uptime" 
    - ssh ${DEV_USER}@${DEV_HOST} "id"
    - cd backend
    - scp target/sausage-store-${VERSION}.jar ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/sausage-store-${VERSION}.jar
    - ssh ${DEV_USER}@${DEV_HOST} "export CURRENT_VERSION=${VERSION}; export VERSION=${VERSION}; export DEV_HOST=${DEV_HOST}; export NEXUS_REPO_URL=${NEXUS_REPO_URL}; export NEXUS_REPO_BACKEND_NAME=${NEXUS_REPO_BACKEND_NAME}; export NEXUS_REPO_USER=${NEXUS_REPO_USER}; export NEXUS_REPO_PASS=${NEXUS_REPO_PASS}; setsid /bin/bash -s" < ./deploy.sh

rollback:
  stage: deploy 
  environment:
    name: "production"  
    action: stop 
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 600 ~/.ssh/known_hosts
  script:
    - ssh ${DEV_USER}@${DEV_HOST} "uptime"
    - ssh ${DEV_USER}@${DEV_HOST} "echo 'Откатываем бэкенд на предыдущую версию...'";
  when: manual

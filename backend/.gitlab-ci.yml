stages:
  - build
  - release
  - deploy

variables:
  VERSION: "1.0.${CI_PIPELINE_ID}"
  DOCKER_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/sausage-backend:${VERSION}"

cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository


build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - echo "Building Docker image for backend..."    
    - echo ${CI_REGISTRY_IMAGE}
    - echo ${CI_PROJECT_DIR}
    - /kaniko/executor --context "${CI_PROJECT_DIR}/backend" --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile" --destination "${DOCKER_IMAGE_NAME}" --build-arg VERSION=${VERSION} --cache=true
    
    

release:
  stage: release
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [""]
  before_script:
    - crane auth login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  script:
    - crane tag ${DOCKER_IMAGE_NAME} ${VERSION}


deploy:
  stage: deploy
  image: docker:24.0.7-alpine3.19
  environment:
    name: production
    url: http://std-ext-016-79.praktikum-services.tech
  before_script:
    # Установка SSH клиента
    - apk add --no-cache openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY_DEPLOY" | tr -d '\r' | ssh-add -
    - mkdir -p /root/.ssh
    - chmod 700 /root/.ssh
    - echo "$SSH_KNOWN_HOSTS_DEPLOY" > /root/.ssh/known_hosts
    - chmod 600 /root/.ssh/known_hosts
    - echo "CI_PROJECT_DIR='${CI_PROJECT_DIR}'"

    # Создание директорий на удалённом сервере
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "sudo mkdir -p ~${CI_PROJECT_DIR}"
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "sudo mkdir -p ~${CI_PROJECT_DIR}/backend"
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "sudo mkdir -p ~${CI_PROJECT_DIR}/logs"

  script:
    # Очистка старых файлов
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "sudo rm -rf ~${CI_PROJECT_DIR}/.env || true"
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "sudo rm -rf ~${CI_PROJECT_DIR}/backend/default.conf || true"
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "sudo rm -rf ~${CI_PROJECT_DIR}/backend/docker-compose.yml || true"
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "sudo rm -rf ~${CI_PROJECT_DIR}/backend/Dockerfile || true"

    # Копирование новых файлов
    - cat ./docker-compose.yml | ssh ${DEPLOY_USER}@${DEPLOY_HOST} "sudo tee ~${CI_PROJECT_DIR}/docker-compose.yml > /dev/null"
    - cat ./backend/deploy.sh | ssh ${DEPLOY_USER}@${DEPLOY_HOST} "sudo tee ~${CI_PROJECT_DIR}/backend/deploy.sh > /dev/null"
    - cat ./backend/Dockerfile | ssh ${DEPLOY_USER}@${DEPLOY_HOST} "sudo tee ~${CI_PROJECT_DIR}/backend/Dockerfile > /dev/null"


    # Делаем скрипт исполняемым
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "sudo chmod +x ~${CI_PROJECT_DIR}/backend/deploy.sh"
    # Создаём .env файл с переменными для docker-compose
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "[ ! -f ~${CI_PROJECT_DIR}/.env ] && sudo touch ~${CI_PROJECT_DIR}/.env || true"
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "echo 'CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE}' | sudo tee -a ~${CI_PROJECT_DIR}/.env > /dev/null"
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "echo 'VERSION=${VERSION}' | sudo tee -a ~${CI_PROJECT_DIR}/.env > /dev/null"
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "echo 'DOCKER_IMAGE_NAME=${DOCKER_IMAGE_NAME}' | sudo tee -a ~${CI_PROJECT_DIR}/.env > /dev/null"
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "echo 'CI_REGISTRY_USER=${CI_REGISTRY_USER}' | sudo tee -a ~${CI_PROJECT_DIR}/.env > /dev/null"
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "echo 'CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}' | sudo tee -a ~${CI_PROJECT_DIR}/.env   > /dev/null"
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "echo 'SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}' | sudo tee -a ~${CI_PROJECT_DIR}/.env   > /dev/null"
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "echo 'SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}' | sudo tee -a ~${CI_PROJECT_DIR}/.env > /dev/null"
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "echo 'SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}' | sudo tee -a ~${CI_PROJECT_DIR}/.env > /dev/null"
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "echo 'BACKEND_VERSION=${VERSION}' | sudo tee -a ~${CI_PROJECT_DIR}/.env > /dev/null"
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "echo 'SPRING_DATASOURCE_HOST=${SPRING_DATASOURCE_HOST}' | sudo tee -a ~${CI_PROJECT_DIR}/.env > /dev/null"
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "echo 'SPRING_DATASOURCE_PORT=${SPRING_DATASOURCE_PORT}' | sudo tee -a ~${CI_PROJECT_DIR}/.env > /dev/null"
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "echo 'SPRING_DATASOURCE_DATABASE=${SPRING_DATASOURCE_DATABASE}' | sudo tee -a ~${CI_PROJECT_DIR}/.env > /dev/null"
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "echo 'REPORTS_MONGODB_URI=${SPRING_DATA_MONGODB_URI}' | sudo tee -a ~${CI_PROJECT_DIR}/.env   > /dev/null"
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "echo 'SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE=8' | sudo tee -a ~${CI_PROJECT_DIR}/.env > /dev/null"
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "echo 'SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE=2' | sudo tee -a ~${CI_PROJECT_DIR}/.env   > /dev/null"    
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "echo 'LOG_PATH=/tmp' | sudo tee -a ~${CI_PROJECT_DIR}/.env > /dev/null"
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "echo 'REPORT_PATH=/tmp' | sudo tee -a ~${CI_PROJECT_DIR}/.env > /dev/null"
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "echo 'CI_PROJECT_DIR=${CI_PROJECT_DIR}' | sudo tee -a ~${CI_PROJECT_DIR}/.env   > /dev/null"    

    # Выполняем deploy.sh, передавая нужные аргументы
    - |
      ssh ${DEPLOY_USER}@${DEPLOY_HOST} "sudo  ~${CI_PROJECT_DIR}/backend/deploy.sh \
        '${DOCKER_IMAGE_NAME}' \
        '${VERSION}' \
        '${CI_REGISTRY_USER}' \
        '${CI_REGISTRY_PASSWORD}' \
        '${SPRING_DATASOURCE_URL}' \
        '${SPRING_DATASOURCE_DATABASE}' \
        '${SPRING_DATASOURCE_USERNAME}' \
        '${SPRING_DATASOURCE_PASSWORD}' \
        '${SPRING_DATA_MONGODB_URI}' \
        '${CI_REGISTRY_IMAGE}' \
        '${CI_PROJECT_DIR}'"
